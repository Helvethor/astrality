settings/astrality:
    # If hot_reload_config is enabled, modifications to this file automatically
    # runs:
    #       1) exit actions from the old configuration
    #       2) startup actions from the new configuration
    # Requires restart if enabled
    hot_reload_config: true

    # Modified templates can be automatically recompiled
    recompile_modified_templates: true

    # You can delay astrality on startup. The delay is given in seconds.
    startup_delay: 0

    # Astrality can wait for shell commands to complete in their specified
    # order. You can set the number of seconds Astrality waits for the shell
    # commands to exit.
    run_timeout: 0

    # Modules can require successfull shell commands (non-zero exit codes) in
    # order to be enabled. You can specify the timeout for such checks, given
    # in seconds.
    requires_timeout: 1


context/host:
    # Here we define some context values which often change between host
    # computers, and are therefore practical to use in our templates.
    displays:
        # All displays defined here are used in the polybar module. It creates
        # one bar for each of the display handles, where the bar identifier is
        # the same as the display handle. This way you can start a polybar for
        # the primary screen by running:
        #     polybar --config {modules/polybar/config.template} HDMI2
        primary:
            handle: HDMI2
            dpi: 96

        secondary:
            handle: eDP1
            dpi: 96


    interfaces:
        wlan:
            # You can also use command substitution in order to insert the
            # standard output of a shell command into a configuration option. 
            #
            # This is also used by the polybar template to point the
            # wireless-internet polybar module to the correct interface.
            handle: $( iwconfig 2>/dev/null | grep -o "^\w*" )

        ethernet:
            handle: eno0


context/fonts:
    # Here we define some context values for fonts that we want to use in
    # several different configurations, another common use case for context
    # values in templates.

    # You can use integer indexed variables in order to have fallback values.
    # If {{ fonts:4/5/6 on so an }} is used in a template, but it is not
    # defined, it will be replaced with {{ ast:fonts:3 }} instead. This is
    # useful when you dont want to assume how many fonts you want to use when
    # you write your templates.
    #
    # Here we define the main fonts used across our applications. Where 1
    # is the primary font, 2 the secondary font, and so on.
    1:
        name: FuraCode Nerd Font
        size: 8

    2:
        name: FuraMono Nerd Font
        size: 8

    3:
        name: RobotoMono Nerd Font
        size: 8

    # We also add some configurations which are specific for some application
    # types.
    terminal:
        size: 12

    status_bar:
        size: 8


module/colors:
    # This module is used to import a color scheme into the `color` context
    # section. This makes it easy to change color schemes by changing the
    # `from_section` option below. Take a look at the color_schemes.yaml file
    # to see how to use color scheme context values in your templates.
    on_startup:
        import_context:
            - from_path: modules/colors/color_schemes.yaml
              from_section: gruvbox_dark
              to_section: colors


module/terminals:
    # Use the colors defined in the `colors` module for the color scheme
    # for all the terminals you might use. Making it easy to switch color
    # schemes for all your terminals at the same time.
    #
    # Alacritty: https://github.com/jwilm/alacritty
    # Kitty: https://github.com/kovidgoyal/kitty

    enabled: false
    requires: 
        - command -v alacritty
        - command -v kitty

    on_startup:
        compile:
            - template: modules/terminals/alacritty.yaml.template
              target: ${XDG_CONFIG_HOME}/alacritty/alacritty.yml
            - template: modules/terminals/kitty.conf.template
              target: ${XDG_CONFIG_HOME}/kitty/kitty.conf


module/polybar:
    enabled: true
    requires: command -v polybar

    on_startup:
        compile:
            - template: modules/polybar/config.template

        run:
            - killall -q polybar
            - polybar --config={modules/polybar/config.template} --reload HDMI2
            - polybar --config={modules/polybar/config.template} --reload eDP1

    on_modified:
        modules/polybar/config.template:
            compile:
                - template: modules/polybar/config.template


module/solar_desktop:
    # A module for changing your wallpaper based on the suns position in the
    # sky, while changing the font color of two conky modules to fit the
    # wallpaper's colors. This module demonstrates more advanced features.
    #
    # I reccomend you to read the docs at https://astrality.readthedocs.io
    # if you want to understand something that seems unclear.
    enabled: true

    # A module can require shell commands to return successfully in order to
    # enable the module. Here, we check if `feh` and `conky` are installed.
    requires:
        - command -v feh
        - command -v conky

    event_listener:
        # The solar event listener provides the following events:
        # sunrise, morning, afternoon, sunset, and night.
        type: solar

        # Since this is dependent on your exact location, you have to specify
        # your GPS coordinates. They are can be easily obtained from:
        # https://www.latlong.net/
        latitude: 63.446827
        longitude: 10.421906
        elevation: 0

        # You can force a event listener to always return the same event for
        # debugging. For example, if you want to check if all your periodic
        # color schemes fit your the respective periodic wallpapers, without
        # waiting for sunset, etc..
        # force_event: sunrise

    on_startup:
        # Execute all actions specified in `on_event` on Astrality startup,
        # since the conky templates are compiled in that block, and we need
        # those compiled templates in the run actions below.
        trigger: on_event

        # Start conky modules on startup.
        # We do not have to restart conky when we recompile the templates,
        # since conky automatically reloads when the -c source changes
        # change.
        #
        # We surround the template paths with {} since we want to refer to the
        # *compiled* templates, and not the template sources.
        run:
            - conky -c {modules/solar_desktop/time.template}
            - conky -c {modules/solar_desktop/performance.template}

    on_event:
        # Import the context section named the same as the current event,
        # e.g. `night`, into the global context section named `wallpaper_colors`,
        # from the file: modules/solar_desktop/solar_colors.yaml.
        import_context:
            from_path: modules/solar_desktop/solar_colors.yaml
            from_section: '{event}'
            to_section: wallpaper_colors

        # Compile the templates specified in the conky module, as their
        # context values have changed due to the import_context action above.
        compile:
            - template: modules/solar_desktop/time.template
            - template: modules/solar_desktop/performance.template

        # Run shell command to change the desktop wallpaper named the same
        # as the current event.
        run: feh --bg-fill modules/solar_desktop/{event}.*

    on_exit:
        # Kill the conky processes on Astrality shutdown.
        run: pkill -f conky


# vim:filetype=yaml
