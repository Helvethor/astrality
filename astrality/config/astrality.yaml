settings/astrality:
    # If hot_reload is enabled, modifications to this file automatically runs:
    #       1) exit actions from the old configuration
    #       2) startup actions from the new configuration
    # Requires restart if enabled
    hot_reload: false

    # You can delay astrality on startup. The delay is given in seconds.
    startup_delay: 0

    # Astrality can wait for shell commands to complete in their specified order.
    # You can set the number of seconds Astrality waits for the shell commands to exit.
    run_timeout: 0

    # Modules can require successfull shell commands (non-zero exit codes) in order
    # to be enabled. You can specify the timeout for such checks, given in seconds.
    requires_timeout: 1


module/solar_desktop:
    # A module for changing your wallpaper based on the suns position in the
    # sky, while changing the font color of two conky modules to fit the
    # wallpaper's colors
    enabled: true

    # A module can require shell commands to return successfully in order to
    # enable the module. Here, we check if `feh` and `conky` are installed.
    requires:
        - command -v feh
        - command -v conky

    event_listener:
        # The solar event listener provides the following events:
        # sunrise, morning, afternoon, sunset, and night.
        type: solar

        # Since this is dependent on your exact location, you have to specify your
        # GPS coordinates. They are can be easily obtained from:
        # https://www.latlong.net/
        latitude: 63.446827
        longitude: 10.421906
        elevation: 0

        # You can force a event listener to always return the same event for debugging.
        # For example, if you want to check if all your periodic color schemes
        # fit your the respective periodic wallpapers, without waiting for sunset,
        # etc..
        # force_event: sunrise

    on_startup:
        # Execute all actions specified in `on_event` on Astrality startup,
        # since the conky templates are compiled in that block, and we need
        # those compiled templates in the run actions below.
        trigger: on_event

        # Start conky modules on startup.
        # We do not have to restart conky when we recompile the templates,
        # since conky automatically reloads when the -c source changes
        # change.
        #
        # We surround the template paths with {} since we want to refer to the
        # *compiled* templates, and not the template sources.
        run:
            - conky -c {modules/solar_desktop/time.template}
            - conky -c {modules/solar_desktop/performance.template}

    on_event:
        # Import the context section named the same as the current event,
        # e.g. `night`, into the global context section named `colors`,
        # from the file: modules/solar_desktop/solar_colors.yaml.
        import_context:
            - from_path: modules/solar_desktop/solar_colors.yaml
              from_section: '{event}'
              to_section: colors

        # Compile the templates specified in the conky module, as their
        # context values have changed due to the import_context action above.
        compile:
            - template: modules/solar_desktop/time.template
            - template: modules/solar_desktop/performance.template

        # Run shell command to change the desktop wallpaper named the same
        # as the current event.
        run:
            - feh --bg-fill modules/solar_desktop/{event}.*

    on_exit:
        # Kill the conky processes on Astrality shutdown.
        run:
            - pkill -f conky


context/general:
    # We can define context values used when compiling templates.
    # For instance, with this option set, you can use {{ general.display }} in all
    # your templates, and it will be replaced with eDP1
    display: eDP1

    # You can also use command substitution in order to insert the standard
    # output of a shell command into a configuration option.
    HDMI: $(xrandr | grep "HDMI2 connected")


context/fonts:
    # You can use integer indexed variables in order to have fallback values. If
    # ${ast:fonts:4} is used in a template, but it is not defined, it will be
    # replaced with ${ast:fonts:3} instead.
    1: FuraCode Nerd Font
    2: FuraMono Nerd Font
    3: RobotoMono Nerd Font

# vim:filetype=yaml
